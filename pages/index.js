import Head from "next/head";
import Image from "next/image";
import Typography from "@mui/material/Typography";
import {
  // Checkbox,
  Box,
  Container,
  FormControlLabel,
  FormGroup,
  Slider,
  Stack,
  Divider,
  Button,
  IconButton,
  Checkbox,
  LinearProgress,
} from "@mui/material";

import ArrowForwardIcon from "@mui/icons-material/ArrowForward";
import { useEffect, useRef, useState } from "react";
import ContentCopyOutlinedIcon from "@mui/icons-material/ContentCopyOutlined";
import { getPassword } from "../Components/test.utils";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { CopyToClipboard } from "react-copy-to-clipboard";

export default function Home() {
  const [char, setChar] = useState(7);
  const [hasNmbr, setHasNmbr] = useState(false);
  const [hasUpperCase, setHasUpperCase] = useState(false);
  const [hasSymb, setHasSymb] = useState(false);
  const [hasAlpha, setHasAlpha] = useState(true);
  const [password, setPassword] = useState("");
  const [strength, setStrength] = useState();
  const [strengthRate, setStrengthRate] = useState(0);
  const progressRef = useRef();

  const nmbrChange = () => {
    setHasNmbr(!hasNmbr);
  };

  const capsChange = () => {
    setHasUpperCase(!hasUpperCase);
  };

  const alphaChange = () => {
    setHasAlpha(hasAlpha);
  };

  const symbChange = () => {
    setHasSymb(!hasSymb);
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    setPassword(getPassword(hasUpperCase, hasNmbr, hasSymb, char));
  };

  useEffect(() => {
    const passwordStrenghtMeter = (
      value = 0,
      hasNmbr,
      hasUpperCase,
      hasSymb
    ) => {
      let y = 0;
      y = value < 5 ? 0 : value < 10 ? 1 : value < 20 ? 2 : 3;

      let x = 0;
      x = hasNmbr ? 1 : 0;

      let z = 0;
      z = hasUpperCase ? 1 : 0;

      let w = 0;
      w = hasSymb ? 1 : 0;

      let range = x + y + w + z;
      setStrengthRate(range);
      setStrength(range);

      range <= 1
        ? setStrength("Frail")
        : range === 2
        ? setStrength("Weak")
        : range === 3
        ? setStrength("Medium")
        : range === 4
        ? setStrength("Strong")
        : range === 5
        ? setStrength("Impeccable")
        : setStrength("Fort Knox");
    };

    passwordStrenghtMeter(char, hasNmbr, hasSymb, hasUpperCase);
  }, [char, hasNmbr, hasSymb, hasUpperCase]);

  const styleContainer = {
    backgroundColor: "#24232a",
    width: { sm: "50vw", xs: "100%", lg: "30vw" },
    padding: { xs: "16px" },
  };

  return (
    <div className="">
      <Head>
        <title>Password Generator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container
        sx={{
          backgroundColor: { xs: "#24232a", sm: "#0e0d14" },
          height: "100vh",
          // width: "100%",
          color: "white",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          flexDirection: "column",
        }}
      >
        <Box p={4} my={0.5} sx={styleContainer}>
          {/* pannel */}

          <ToastContainer />
          <Stack
            justifyContent="space-between"
            direction="row"
            alignItems="center"
            position="relative"
            sx={{
              backgroundColor: { xs: "rgba(36 45 42 0.4)", sm: "#24232a" },
              padding: { xs: "10px", sm: 0 },
            }}
          >
            <Box
              sx={{
                width: "30ch",
                overflowX: "hidden",
                textOverflow: "ellipsis",
              }}
            >
              <Typography variant="body" noWrap sx={{ fontSize: "24px" }}>
                {password}
              </Typography>
            </Box>
            <CopyToClipboard text={password}>
              {/*  */}
              <IconButton
                sx={{ color: "white" }}
                onClick={() => {
                  toast("copied password", {
                    position: "top-right",
                    autoClose: 5000,
                    hideProgressBar: false,
                    closeOnClick: false,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                    theme: "dark",
                  });
                }}
              >
                <ContentCopyOutlinedIcon />
              </IconButton>

              {/* </> */}
            </CopyToClipboard>
          </Stack>
          {/* pannel */}
        </Box>
        <Divider />
        <Stack p={4} sx={styleContainer}>
          <form>
            <Box mb={2}>
              {/* slider component start */}
              <Stack
                justifyContent="space-between"
                direction="row"
                alignItems="center"
              >
                <Typography variant="body" sx={{ fontSize: "24px" }}>
                  Character Length
                </Typography>
                <Typography variant="h4">{char}</Typography>
              </Stack>
              <Box>
                <Slider
                  aria-label="Temperature"
                  defaultValue={char}
                  value={char}
                  onChange={(e) => {
                    setChar(e.target.value);
                  }}
                  // getAriaValueText={valuetext}
                  valueLabelDisplay="auto"
                  step={1}
                  marks
                  min={0}
                  max={30}
                />
              </Box>
              {/* slider component end */}
            </Box>
            <Box my={2}>
              {/* check box */}

              <FormGroup>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={hasAlpha}
                      onChange={alphaChange}
                      name="lowercase"
                    />
                  }
                  label="Include Lowercase Letters"
                />
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={hasUpperCase}
                      onChange={capsChange}
                      name="uppercase"
                    />
                  }
                  label="Include Uppercase Letters"
                />
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={hasNmbr}
                      onChange={nmbrChange}
                      name="antoine"
                    />
                  }
                  label="Include Numbers"
                />
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={hasSymb}
                      onChange={symbChange}
                      name="antoine"
                    />
                  }
                  label="Include Symbols"
                />
              </FormGroup>
              {/* check box */}
            </Box>
            <Box
              p={2}
              my={2}
              sx={{ backgroundColor: "#18171f", position: "relative" }}
            >
              {/* strenght */}

              <Box sx={{ width: "100%", mr: 1 }}>
                <LinearProgress
                  variant="determinate"
                  valueBuffer={100}
                  value={strengthRate * 16.67}
                  sx={{
                    height: "24px",
                  }}
                />
                <Box
                  sx={{
                    position: "absolute",
                    top: "25%",
                    left: "5%",
                    translateX: `translateX(${strengthRate * 200})`,
                  }}
                >
                  <Typography variant="caption" sx={{ fontSize: "16px" }}>
                    {strength}
                  </Typography>
                </Box>
              </Box>

              {/* strenght */}
            </Box>
            <Box mt={2} sx={{ width: "100%" }}>
              <Button
                ref={progressRef}
                onClick={handleSubmit}
                sx={{ width: "100%" }}
                size="large"
                variant="contained"
                endIcon={<ArrowForwardIcon />}
              >
                Generate
              </Button>
            </Box>
          </form>
        </Stack>
      </Container>

      <footer className=""></footer>
    </div>
  );
}

// container color : #24232a
// lime color : #a5ffaf
// body shade color : #18171f
